version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: classapphub_postgres_perf
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # Performance tuning for PostgreSQL
      - POSTGRES_INITDB_ARGS="--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: classapphub_redis_perf
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: classapphub_backend_perf
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GPT_MODEL=${GPT_MODEL}
      - DALLE_MODEL=${DALLE_MODEL}
      - CDN_ENABLED=true
      - CDN_BASE_URL=${CDN_BASE_URL}
      - STATIC_DOMAIN=${STATIC_DOMAIN}
      # Performance optimizations
      - NODE_OPTIONS="--max-old-space-size=1024"
      - UV_THREADPOOL_SIZE=16
    volumes:
      - ./uploads:/app/uploads
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    mem_limit: 1g
    cpus: 1.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/performance/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
      echo 'Waiting for database migration...' &&
      npx prisma migrate deploy &&
      echo 'Starting application...' &&
      node dist/index.js
      "

  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_CDN_URL=${CDN_BASE_URL}
    container_name: classapphub_frontend_perf
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_CDN_URL=${CDN_BASE_URL}
    restart: always
    mem_limit: 512m
    cpus: 0.5

  nginx:
    build: 
      context: ../nginx
      dockerfile: Dockerfile
    container_name: classapphub_nginx_perf
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.performance.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/cache:/var/cache/nginx
      - ./uploads:/var/www/uploads
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # CDN simulation (for testing)
  cdn-simulator:
    image: nginx:alpine
    container_name: classapphub_cdn_sim
    volumes:
      - ./nginx/cdn.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/var/www/static
    ports:
      - "8080:80"
    restart: always

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: classapphub_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: classapphub_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16