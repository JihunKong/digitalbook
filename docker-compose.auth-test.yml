version: '3.8'

services:
  # PostgreSQL Database for Testing
  postgres-auth-test:
    image: postgres:15-alpine
    container_name: digitalbook-postgres-auth-test
    environment:
      POSTGRES_DB: digitalbook_auth_test
      POSTGRES_USER: authtest
      POSTGRES_PASSWORD: authtest123
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 128MB
    ports:
      - "5434:5432"
    volumes:
      - postgres-auth-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authtest -d digitalbook_auth_test"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - auth-test-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Redis Cache for Testing
  redis-auth-test:
    image: redis:7-alpine
    container_name: digitalbook-redis-auth-test
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - auth-test-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Backend API Server for Authentication Testing
  backend-auth-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: test
    container_name: digitalbook-backend-auth-test
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://authtest:authtest123@postgres-auth-test:5432/digitalbook_auth_test
      REDIS_URL: redis://redis-auth-test:6379
      JWT_SECRET: auth-test-jwt-secret-2024
      JWT_REFRESH_SECRET: auth-test-refresh-secret-2024
      ACCESS_TOKEN_EXPIRES: 15m
      REFRESH_TOKEN_EXPIRES: 7d
      PORT: 4000
      CORS_ORIGIN: "http://frontend-auth-test:3000,http://localhost:3000"
      # Rate limiting for testing
      RATE_LIMIT_WINDOW: 1m
      RATE_LIMIT_MAX: 50
      # Logging
      LOG_LEVEL: info
      # CSRF Protection
      ENABLE_CSRF: true
      CSRF_SECRET: auth-test-csrf-secret-2024
      # Backend internal URL for container communication
      BACKEND_INTERNAL_URL: http://backend-auth-test:4000/api
    ports:
      - "4002:4000"
    depends_on:
      postgres-auth-test:
        condition: service_healthy
      redis-auth-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - auth-test-network
    volumes:
      - backend-auth-test-logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Frontend Next.js Server for Authentication Testing
  frontend-auth-test:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: test
    container_name: digitalbook-frontend-auth-test
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://backend-auth-test:4000
      NEXT_PUBLIC_WS_URL: ws://backend-auth-test:4000
      NEXT_PUBLIC_ENVIRONMENT: test
      BACKEND_INTERNAL_URL: http://backend-auth-test:4000/api
    ports:
      - "3002:3000"
    depends_on:
      backend-auth-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - auth-test-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Database Migration and Seeding
  db-setup-auth-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: digitalbook-db-setup-auth-test
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://authtest:authtest123@postgres-auth-test:5432/digitalbook_auth_test
    depends_on:
      postgres-auth-test:
        condition: service_healthy
    networks:
      - auth-test-network
    volumes:
      - ./backend/prisma:/app/prisma
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        npx prisma migrate deploy &&
        echo 'Seeding test data...' &&
        npx prisma db seed &&
        echo 'Database setup completed successfully'
      "
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Playwright E2E Test Runner for Authentication
  playwright-auth-test:
    build:
      context: .
      dockerfile: Dockerfile.e2e
    container_name: digitalbook-playwright-auth-test
    environment:
      # Test target URLs
      BASE_URL: http://frontend-auth-test:3000
      API_URL: http://backend-auth-test:4000
      # Test user credentials
      TEST_USER_NAME: "테스트교사"
      TEST_USER_EMAIL: "test@teacher.com"
      TEST_USER_PASSWORD: "testpassword123"
      TEST_USER_ROLE: "TEACHER"
      # Playwright configuration
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      CI: true
      # Test timeouts
      TEST_TIMEOUT: 60000
      RETRY_COUNT: 2
      WORKERS: 2
      # Debugging
      DEBUG: pw:api
      PWDEBUG: 0
      # Artifact paths
      PLAYWRIGHT_ARTIFACTS_PATH: /app/test-results
      PLAYWRIGHT_REPORT_PATH: /app/playwright-report
    depends_on:
      frontend-auth-test:
        condition: service_healthy
      backend-auth-test:
        condition: service_healthy
      db-setup-auth-test:
        condition: service_completed_successfully
    networks:
      - auth-test-network
    volumes:
      # Test files (read-only)
      - ./tests/e2e/auth-focused.spec.ts:/app/tests/e2e/auth-focused.spec.ts:ro
      - ./playwright.config.ts:/app/playwright.config.ts:ro
      # Test artifacts (writable)
      - auth-test-report:/app/playwright-report
      - auth-test-results:/app/test-results
      - auth-test-videos:/app/videos
      - auth-test-screenshots:/app/screenshots
      - auth-test-traces:/app/trace
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: >
      sh -c "
        echo 'Waiting for services to be fully ready...' &&
        sleep 15 &&
        echo 'Starting authentication E2E tests...' &&
        npx playwright test tests/e2e/auth-focused.spec.ts --project=chromium-desktop --reporter=html,list,json --workers=2 --retries=2 &&
        echo 'Tests completed successfully!' &&
        echo 'Report will be available at http://localhost:9324'
      "

  # Test Report Server
  auth-test-report-server:
    image: nginx:alpine
    container_name: digitalbook-auth-test-report-server
    ports:
      - "9324:80"
    volumes:
      - auth-test-report:/usr/share/nginx/html:ro
      - ./nginx/report-server.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - auth-test-network
    depends_on:
      - playwright-auth-test
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

networks:
  auth-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16

volumes:
  postgres-auth-test-data:
    driver: local
  backend-auth-test-logs:
    driver: local
  auth-test-report:
    driver: local
  auth-test-results:
    driver: local
  auth-test-videos:
    driver: local
  auth-test-screenshots:
    driver: local
  auth-test-traces:
    driver: local