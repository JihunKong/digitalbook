version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: digitalbook-postgres-local
    environment:
      POSTGRES_DB: digitalbook_v2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: digitalbook2024
    volumes:
      - postgres_data_local:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: digitalbook-redis-local
    ports:
      - "6380:6379"
    volumes:
      - redis_data_local:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    container_name: digitalbook-backend-local
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:digitalbook2024@postgres:5432/digitalbook_v2
      REDIS_URL: redis://redis:6379
      JWT_SECRET: digitalbook-v2-local-secret
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    command: >
      sh -c "
      npx prisma generate &&
      npx prisma migrate deploy &&
      npm run dev
      "

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.local
    container_name: digitalbook-frontend-local
    ports:
      - "4545:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000/api
    depends_on:
      - backend
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data_local:
  redis_data_local: